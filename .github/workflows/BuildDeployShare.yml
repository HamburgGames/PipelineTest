name: Tag & Build & Deploy

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - 'release'
      
env:
  BUILD_PREFIX: build-
      
jobs:
  tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag-write.outputs.tag }}
    steps:
      - name: Obtain a GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_APP_CREDENTIALS_TOKEN }})"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
        env:
          GITHUB_TOKEN: ${{ steps.githubAppAuth.outputs.token }}
    
      - uses: undergroundwires/bump-everywhere@1.4.0
        id: create-tag
        with:
          commit-message: 'bump to {{version}}'
          git-token: ${{ steps.githubAppAuth.outputs.token }}
          release-type: 'none'

  getTag:
    name: Get Tag
    needs: tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.write-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0-alpha # Optional fallback tag to use when no tag can be found
      
      - id: write-tag
        run: echo "tag=${{ steps.previoustag.outputs.tag }}" >> "$GITHUB_OUTPUT"

  build:
    name: Build Project üõ†
    needs: getTag
    runs-on: ubuntu-latest
    env:
      BUILD_NAME: ${{ env.BUILD_PREFIX }}${{ needs.getTag.outputs.tag }}
    outputs:
      BUILD_NAME: ${{ steps.write-build-name.outputs.name }}
    steps:
      - id: write-build-name
        run: echo "name=${{ env.BUILD_NAME }}" >> "$GITHUB_OUTPUT"
        
      - run: echo "build name ${{ env.BUILD_NAME }}"
      
      # Checkout
#       - name: Checkout repository
#         uses: actions/checkout@v2
#         with:
#           lfs: true

      # Cache
#       - uses: actions/cache@v2
#         with:
#           path: Library
#           key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
#           restore-keys: |
#             Library-

      # Test
      #TODO uses: game-ci/unity-test-runner@v2

      # Build
#       - name: Build project
#         uses: game-ci/unity-builder@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           targetPlatform: StandaloneWindows64
          
      - name: create world.txt
        run: mkdir build && echo hello > build/helloWorld1.txt && echo "hello 2" > build/helloWorld2.txt
          
      # Zip build
      - name: Zip files
        run: zip -r ${{ env.BUILD_NAME }}.zip build

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ${{ env.BUILD_NAME }}.zip


  deploy:
    name: Deploy to Dropbox üì¶
    needs: build
    runs-on: ubuntu-latest
    outputs:
      link: ${{ steps.link-write.outputs.link }}
    env:
      DEPLOY_PATH: "/${{ github.ref_name }}/"
      BUILD_NAME: ${{ needs.build.outputs.BUILD_NAME }}
    steps:
      #Download artifact
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: Build # optional
          #path: build # optional
          
      - run: ls
          
      # Upload to Dropbox
      - name: Upload to Dropbox
        uses: aTable/deploy-to-dropbox@v1.0.7
        with:
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
          GLOB: ${{ env.BUILD_NAME }}.zip
          DROPBOX_DESTINATION_PATH_PREFIX: ${{ env.DEPLOY_PATH }} # optional, default is /
          DEBUG: true
  
      # Get Dropbox Link
      - name: Create Dropbox Link
        id: create-link-dropbox
        uses: RexIturan/create-link-dropbox@v0.0.1-alpha
        with:
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
          DROPBOX_FILE_PATH: ${{ env.DEPLOY_PATH }}${{ env.BUILD_NAME }}.zip # optional, default is /
          DEBUG: false # optional
  
      - name: Write Link into Output
        id: link-write
        run: echo "link=${{ steps.create-link-dropbox.outputs.link }}" >> "$GITHUB_OUTPUT"
    
    

  publish-link:
    name: Share Link üõéÔ∏è
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      #Post Link to Discord
      - name: Discord Notify
        uses: stegzilla/discord-notify@v4
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          title: Build Link # optional, default is 
          message: "Download Link: ${{needs.deploy.outputs.link}}"
      - name: Use the obtained token
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -d '{"context":"share","state":"success"}' \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA?access_token=$GITHUB_TOKEN"
